// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	v1 "github.com/knightpp/alias-proto/go/pkg/server/v1"
	mock "github.com/stretchr/testify/mock"
)

// Conn is an autogenerated mock type for the Conn type
type Conn struct {
	mock.Mock
}

type Conn_Expecter struct {
	mock *mock.Mock
}

func (_m *Conn) EXPECT() *Conn_Expecter {
	return &Conn_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *Conn) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Conn_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Conn_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Conn_Expecter) Close() *Conn_Close_Call {
	return &Conn_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Conn_Close_Call) Run(run func()) *Conn_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Conn_Close_Call) Return(_a0 error) *Conn_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

// ReceiveMessage provides a mock function with given fields:
func (_m *Conn) ReceiveMessage() (*v1.Message, error) {
	ret := _m.Called()

	var r0 *v1.Message
	if rf, ok := ret.Get(0).(func() *v1.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Conn_ReceiveMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReceiveMessage'
type Conn_ReceiveMessage_Call struct {
	*mock.Call
}

// ReceiveMessage is a helper method to define mock.On call
func (_e *Conn_Expecter) ReceiveMessage() *Conn_ReceiveMessage_Call {
	return &Conn_ReceiveMessage_Call{Call: _e.mock.On("ReceiveMessage")}
}

func (_c *Conn_ReceiveMessage_Call) Run(run func()) *Conn_ReceiveMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Conn_ReceiveMessage_Call) Return(_a0 *v1.Message, _a1 error) *Conn_ReceiveMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SendError provides a mock function with given fields: msg
func (_m *Conn) SendError(msg string) error {
	ret := _m.Called(msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Conn_SendError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendError'
type Conn_SendError_Call struct {
	*mock.Call
}

// SendError is a helper method to define mock.On call
//  - msg string
func (_e *Conn_Expecter) SendError(msg interface{}) *Conn_SendError_Call {
	return &Conn_SendError_Call{Call: _e.mock.On("SendError", msg)}
}

func (_c *Conn_SendError_Call) Run(run func(msg string)) *Conn_SendError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Conn_SendError_Call) Return(_a0 error) *Conn_SendError_Call {
	_c.Call.Return(_a0)
	return _c
}

// SendFatal provides a mock function with given fields: fatal
func (_m *Conn) SendFatal(fatal *v1.FatalMessage) error {
	ret := _m.Called(fatal)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.FatalMessage) error); ok {
		r0 = rf(fatal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Conn_SendFatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendFatal'
type Conn_SendFatal_Call struct {
	*mock.Call
}

// SendFatal is a helper method to define mock.On call
//  - fatal *v1.FatalMessage
func (_e *Conn_Expecter) SendFatal(fatal interface{}) *Conn_SendFatal_Call {
	return &Conn_SendFatal_Call{Call: _e.mock.On("SendFatal", fatal)}
}

func (_c *Conn_SendFatal_Call) Run(run func(fatal *v1.FatalMessage)) *Conn_SendFatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.FatalMessage))
	})
	return _c
}

func (_c *Conn_SendFatal_Call) Return(_a0 error) *Conn_SendFatal_Call {
	_c.Call.Return(_a0)
	return _c
}

// SendInitRoom provides a mock function with given fields: initRoom
func (_m *Conn) SendInitRoom(initRoom *v1.InitRoomMessage) error {
	ret := _m.Called(initRoom)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.InitRoomMessage) error); ok {
		r0 = rf(initRoom)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Conn_SendInitRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendInitRoom'
type Conn_SendInitRoom_Call struct {
	*mock.Call
}

// SendInitRoom is a helper method to define mock.On call
//  - initRoom *v1.InitRoomMessage
func (_e *Conn_Expecter) SendInitRoom(initRoom interface{}) *Conn_SendInitRoom_Call {
	return &Conn_SendInitRoom_Call{Call: _e.mock.On("SendInitRoom", initRoom)}
}

func (_c *Conn_SendInitRoom_Call) Run(run func(initRoom *v1.InitRoomMessage)) *Conn_SendInitRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.InitRoomMessage))
	})
	return _c
}

func (_c *Conn_SendInitRoom_Call) Return(_a0 error) *Conn_SendInitRoom_Call {
	_c.Call.Return(_a0)
	return _c
}

// SendPlayerJoined provides a mock function with given fields: joined
func (_m *Conn) SendPlayerJoined(joined *v1.PlayerJoinedMessage) error {
	ret := _m.Called(joined)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.PlayerJoinedMessage) error); ok {
		r0 = rf(joined)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Conn_SendPlayerJoined_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPlayerJoined'
type Conn_SendPlayerJoined_Call struct {
	*mock.Call
}

// SendPlayerJoined is a helper method to define mock.On call
//  - joined *v1.PlayerJoinedMessage
func (_e *Conn_Expecter) SendPlayerJoined(joined interface{}) *Conn_SendPlayerJoined_Call {
	return &Conn_SendPlayerJoined_Call{Call: _e.mock.On("SendPlayerJoined", joined)}
}

func (_c *Conn_SendPlayerJoined_Call) Run(run func(joined *v1.PlayerJoinedMessage)) *Conn_SendPlayerJoined_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.PlayerJoinedMessage))
	})
	return _c
}

func (_c *Conn_SendPlayerJoined_Call) Return(_a0 error) *Conn_SendPlayerJoined_Call {
	_c.Call.Return(_a0)
	return _c
}

// SendPlayerLeft provides a mock function with given fields: left
func (_m *Conn) SendPlayerLeft(left *v1.PlayerLeftMessage) error {
	ret := _m.Called(left)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.PlayerLeftMessage) error); ok {
		r0 = rf(left)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Conn_SendPlayerLeft_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPlayerLeft'
type Conn_SendPlayerLeft_Call struct {
	*mock.Call
}

// SendPlayerLeft is a helper method to define mock.On call
//  - left *v1.PlayerLeftMessage
func (_e *Conn_Expecter) SendPlayerLeft(left interface{}) *Conn_SendPlayerLeft_Call {
	return &Conn_SendPlayerLeft_Call{Call: _e.mock.On("SendPlayerLeft", left)}
}

func (_c *Conn_SendPlayerLeft_Call) Run(run func(left *v1.PlayerLeftMessage)) *Conn_SendPlayerLeft_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.PlayerLeftMessage))
	})
	return _c
}

func (_c *Conn_SendPlayerLeft_Call) Return(_a0 error) *Conn_SendPlayerLeft_Call {
	_c.Call.Return(_a0)
	return _c
}

// SendTeam provides a mock function with given fields: newTeam
func (_m *Conn) SendTeam(newTeam *v1.TeamMessage) error {
	ret := _m.Called(newTeam)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.TeamMessage) error); ok {
		r0 = rf(newTeam)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Conn_SendTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTeam'
type Conn_SendTeam_Call struct {
	*mock.Call
}

// SendTeam is a helper method to define mock.On call
//  - newTeam *v1.TeamMessage
func (_e *Conn_Expecter) SendTeam(newTeam interface{}) *Conn_SendTeam_Call {
	return &Conn_SendTeam_Call{Call: _e.mock.On("SendTeam", newTeam)}
}

func (_c *Conn_SendTeam_Call) Run(run func(newTeam *v1.TeamMessage)) *Conn_SendTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.TeamMessage))
	})
	return _c
}

func (_c *Conn_SendTeam_Call) Return(_a0 error) *Conn_SendTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

// SendWords provides a mock function with given fields: words
func (_m *Conn) SendWords(words *v1.WordsMessage) error {
	ret := _m.Called(words)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.WordsMessage) error); ok {
		r0 = rf(words)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Conn_SendWords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendWords'
type Conn_SendWords_Call struct {
	*mock.Call
}

// SendWords is a helper method to define mock.On call
//  - words *v1.WordsMessage
func (_e *Conn_Expecter) SendWords(words interface{}) *Conn_SendWords_Call {
	return &Conn_SendWords_Call{Call: _e.mock.On("SendWords", words)}
}

func (_c *Conn_SendWords_Call) Run(run func(words *v1.WordsMessage)) *Conn_SendWords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.WordsMessage))
	})
	return _c
}

func (_c *Conn_SendWords_Call) Return(_a0 error) *Conn_SendWords_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewConn interface {
	mock.TestingT
	Cleanup(func())
}

// NewConn creates a new instance of Conn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConn(t mockConstructorTestingTNewConn) *Conn {
	mock := &Conn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
